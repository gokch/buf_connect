// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: admin_service.proto

package typesconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	types "github.com/gokch/buf_connect/types"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "types.AdminService"
)

// AdminServiceClient is a client for the types.AdminService service.
type AdminServiceClient interface {
	Keygen(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	Mempool(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	Sign(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	Vote(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
}

// NewAdminServiceClient constructs a client for the types.AdminService service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		keygen: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/types.AdminService/Keygen",
			opts...,
		),
		mempool: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/types.AdminService/Mempool",
			opts...,
		),
		sign: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/types.AdminService/Sign",
			opts...,
		),
		vote: connect_go.NewClient[types.Empty, types.Empty](
			httpClient,
			baseURL+"/types.AdminService/Vote",
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	keygen  *connect_go.Client[types.Empty, types.Empty]
	mempool *connect_go.Client[types.Empty, types.Empty]
	sign    *connect_go.Client[types.Empty, types.Empty]
	vote    *connect_go.Client[types.Empty, types.Empty]
}

// Keygen calls types.AdminService.Keygen.
func (c *adminServiceClient) Keygen(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.keygen.CallUnary(ctx, req)
}

// Mempool calls types.AdminService.Mempool.
func (c *adminServiceClient) Mempool(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.mempool.CallUnary(ctx, req)
}

// Sign calls types.AdminService.Sign.
func (c *adminServiceClient) Sign(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.sign.CallUnary(ctx, req)
}

// Vote calls types.AdminService.Vote.
func (c *adminServiceClient) Vote(ctx context.Context, req *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return c.vote.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the types.AdminService service.
type AdminServiceHandler interface {
	Keygen(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	Mempool(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	Sign(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
	Vote(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/types.AdminService/Keygen", connect_go.NewUnaryHandler(
		"/types.AdminService/Keygen",
		svc.Keygen,
		opts...,
	))
	mux.Handle("/types.AdminService/Mempool", connect_go.NewUnaryHandler(
		"/types.AdminService/Mempool",
		svc.Mempool,
		opts...,
	))
	mux.Handle("/types.AdminService/Sign", connect_go.NewUnaryHandler(
		"/types.AdminService/Sign",
		svc.Sign,
		opts...,
	))
	mux.Handle("/types.AdminService/Vote", connect_go.NewUnaryHandler(
		"/types.AdminService/Vote",
		svc.Vote,
		opts...,
	))
	return "/types.AdminService/", mux
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) Keygen(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("types.AdminService.Keygen is not implemented"))
}

func (UnimplementedAdminServiceHandler) Mempool(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("types.AdminService.Mempool is not implemented"))
}

func (UnimplementedAdminServiceHandler) Sign(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("types.AdminService.Sign is not implemented"))
}

func (UnimplementedAdminServiceHandler) Vote(context.Context, *connect_go.Request[types.Empty]) (*connect_go.Response[types.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("types.AdminService.Vote is not implemented"))
}
